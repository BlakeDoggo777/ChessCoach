TODO - experiments
- 3x rotation ablations
- try undo 0.1 value loss weight for self-play, keep for supervised
- probably move commentary training to before supervised/self-play
- (reach out to lc0 guy in the 2 threads, ask about value loss)

TODO - knowledge distillation
- full testing - quantify improvement to self-play game generation (selfplay generation) vs. quality loss (supervised data)
- try improve schedule, e.g.:
	- measure the impact of each training type - maybe an artificial validation batch after each
	- experiment with learning rates, e.g. commentary
	- experiment with tighter interleaving of the rotation (detach from saving somehow)
- try make the student a bit deeper - already hugely smaller with 64 vs. 256 filters
- can make prediction-saving even lazier - only save/reload on-demand, not with each save
- after enough schedule/etc. experiments, think about mixing in some stockfish eval again to speed up early training

TODO - speed up feedback loop
- do a slow run for a few days at least as a control
- get playout cap randomization (Wu) in ASAP to get game numbers up (esp. for value) and compare
- try vectorize/GPU UCT calcs

TODO - next - commentary
- try wrap main engine loop with @tf.function too?
- wrap <start>/<end> in graph mode - Transformer article
- cull attention weight plumbing
- can pre-sequence-and-index commentary
- adam->sgd with momentum
- write unit tests for comment preprocessing
- try time and special-case speed-up prediction for batchsize=1

TODO - text quality
- basic - does the encoder need an extra dense+relu layer after the tower/reshape?
- tokenizing - lots of options for chess specifically, around puntuation, top-k, etc.
- larger model size
- different model architectures
	- definitely try universal transformer
- different tokenizers
	- definitely try SubwordTextEncoder
- build deterministic train/validate split?
- try encode before + after positions - comment on the move, not the position
	- yes, image takes last N positions, but network is trained to evaluate the position, not the delta

TODO
- try out "sleeping" in the rotation - train random noise, different distributions
- get to minimum-viable-selfplay
	- get to piece value understanding ASAP, try out specific A/B positions
	- (lots more ideas below)

Additional head ideas:
- (Wu): "whenever a desired target can be expressed as a sum, conjunction, or disjunction of separate subevents, or would be highly correlated with such subevents, predicting those subevents is likely to help""
- autoencode position
- count all pieces?
- count total square control/ratio/difference/"policy"?
- count piece types
- count piece imbalances
- predict opponent move (Wu uses 0.15 factor)
- principle variation (big output surface, complicated idea)
- predict final board state or piece distribution (like Wu's final ownership)
- king safety, mobility, etc.

Improve self-play training
- warmup (Wu)
	- seeing this more everywhere, FB game nets recently, etc., good justifications re: landscape/adaptive

Once value loss is convering below 0.4 on big network:
- Try knowledge distillation for regression ideas: http://www.cs.ox.ac.uk/files/11078/ICCV19_Distilling_Knowledge_From_a_Deep_Pose_Regressor_Network.pdf

Once self-play is actually learning fast enough, as a control, maybe try the following:
- forced playouts/pruning (Wu)
- SE (lc0) or SE-ish-as-bias (Wu)
- pseudonegatives (look up the paper again, may be difficult/impossible for chess, invalid positions)
- try varying 800 sims in endgames/curriculum
- try 1 vs. 8 value head filters again
- like Wu/lc0, think about finish-fast utility score added to win score - way later though, only useful if it plays well but dithers

Self-play performance
- try shrink Node memory
- TensorRT may be the best bet, even without int8 - see if it's worth the mess, maybe revisit dual-booting

Dev performance
- try make game loading lazy (matching the window, reaping as it moves)

UCI (#2)
- try to increase in-thread parallelism without sacrificing STS strength
	- some kind of idea around only the first N backpropagating, the rest just setting up children/priors?
	- can always look into some of the failing positions and see what's going differently (harder without multiPV though)
- also test different FPU schemes for strength, but care, and def. don't change training
- try multi-thread
	- need to sync std::cout - use Reply() everywhere
- basic improvements to time control
	- don't waste time when only 1 or few legal moves
	- if dangerous time left, take mate-in-N rather than trying to find faster

CPU+GPU integration performance:
- break down MCTS timing details just in case anything's off (just use sampling)
- image key for prediction cache can be incrementally updated if it helps enough
- do some timeline charting for CPU vs. GPU use
	- it may make sense to keep shared images/values/policies but have separate CPU worker threads
	  drop in/pick up there, using a GPU worker like very beginning, and maybe oversubscribe
	  like double-buffer games? might just be equivalent to doubling threads though. seem to be
	  limited by Node memory use now. anyway, think about it.
- buffer fstreams for windows
- for Nodes can point last sibling at root and unrecurse deletion (sacrificing breadth-at-once)

Code quality
- copy config.toml from install->user on run (if not present) - optimized for dev iteration atm
- fix _ in network names - split on final _
- factor out all-exist ringbuffer with foreach iteration (begin/end)
- privatize C++ methods (got too python-brained)
- try split up MCTS vs. selfplaygames better - e.g. maybe move softmax/selectmove out? separate files?
- try split SelfPlayGame/Worker vs. "UciGame/Worker" better somehow (including image/value/policy arrays, batch sizes, etc.)
- improve config use in C++, feels messy
- add Python type info everywhere - look up best practices for linting etc.
- poison self-play workers and join threads properly
- check for any unnecessary move constructors
- add further architecture configuration to toml config (residuals*filters, etc.)
- switch to sample ratio, rather than specifying games + steps (complicated, ties in to "curriculum schedule" in config maybe)

UCI (#3)
- "random move with eval within 1%"
	- if best is value N, softmax sample with temperature 10 among (value >= N - 0.01), where 0.01 = (win-loss)/100
	- "best" I'm assuming is the otherwise usual selection, i.e. most visited
	- code for shorter mates, etc., should override this behavior (no diversity needed then)
- mate
	- if root node's terminal value is known, and allowed to stop searching, make a move instantly and save time
	- add global depth cut-off (a little tricky, need to allow MCTS to "back up" and ban paths that don't reach a leaf in time)
	- add killer heuristic (needs to vanish quickly with exploration)
		- test with M1 position with M1 prior artifically set low for ply 0
		- also strength-test
	- forced draw propagation if it'll help
- implement worthwhile options (work out hash, TT vs. prediction cache)
- workaround for .exe vs. non in ChessBase, test as kibitzer
- implement proper time controls/search options, ponder

Scalability
- can't play enough self-play games, work on new ideas soon
- still lots of paging with millions of games in the window

Deployment
- installers, instructions, progress indicators, error handling, etc.

Publishing
- write-ups
- website - game-in-10, one at a time, people can watch, comments shown for each move

Low priority
- structured binding, check all pairs

Revisit
- try batch renorm + ghost batch norm
	- Bug: https://github.com/tensorflow/tensorflow/issues/32380
- any more cache tuning? - hits about 70% full 40% hit rate after 3142 games, 12 ply max
	- while not full hit rate should be higher? add some new metrics

Bugs
- Close cleanly if selfplay/UCI network not found by name in config list, in Python or C++

Won't do
- TPUs or mixed mode (focus is on single desktop, GTX 1080 compatibility)
- Richer UCI features like multiPV
- GUI for play/debug, only UCI debug commands
- CPU optimization - not measurable enough while GPU-dominated
- endgame tablebases (e.g. leveraging Stockfish probing code)
	- UCI: not interesting enough, others can add if going for pure strength
	- Training: complicated, scope too large - self-play needs to make mistakes to learn imbalances