PUCT - medium confidence
- try prior temperature
- try killer heuristic for mate-in-N/syzygy lower bound
- try value stddev
- try 6-man syzygy

Optimization
- finish batched/parallelized ask/tell once training finished
- A/B-test threads/parallelism, and slowstart settings
- A/B-test cache-as-TT with/without repetition state and/or no-progress count (bucketed?)
- long optimization, tournament mode, 30s per move (needs distributed) - include cpuct
- final optimization with just move diversity parameters (consider adding visit%/upweight% threshold) - 30s per move
- deep tournaments, calculate ratings vs. various engines, CC with AZ-PUCT, etc., with various time controls - keep PGNs

Code quality
- need to add (tensorflow-text + sentencepiece + tf-models-official) to prepare.sh, etc., once TPU VM fixes are deployed
- copy config.toml from install->user on run (if not present) - optimized for dev iteration atm
- privatize C++ methods (got too python-brained)
- check for any unnecessary move constructors
- consolidate exception types in C++ and Python

Deployment
- re-test on fresh VMs
	- test without any virtual env on windows too, and with non-conda venv
- installers, instructions, progress indicators, error handling, etc.
- linux unit test script
- add windows command line build script, binplace somewhere cleanly

Measurements
- Tournament Elo across training history (teacher/student, all SWA, every 400k)
- Controlled NPS (fixed movetime, multiple trials) (cache/no, teacher/student, TPU/GPU)
- Self-play games/hour steady-state (from 10 chunks to 20 chunks or w/e) (cache/no, teacher/student, TPU/GPU)
- Training time per checkpoint for main model and commentary (TPU/GPU)
- Test suite results (STS, Arasan21) (teacher/student, TPU/GPU)

Publishing
- write-ups
- final network weights
- datasets? check costs

Won't do
- TensorRT or TF C++ API (overly complicated setup, especiallly building TF on Windows, embarrassingly bad)
- Mixed precision (depends on specific hardware, complicates code)
- Richer UCI features like multiPV or ponder
- contempt (self-play or UCI)
- ~100MB-sized chunks
	- complicated by supervised vs. self-play size, and time between networks for small self-play clusters
	- BigTable is an alternative if training needs to scale up to pods
- playout cap randomization (Wu)
	- great concept but greatly complicates training data compression, code, prefer simplicity in this trade-off
- finish-fast utility score added to win score a la SAI/Wu/lc0
	- useful to help with dithering, especially late-game, but not meeting the bar
- alpha manager improvements
	- allow for some roles to be broken/unassigned rather than bailing out
	- prioritize trainer over players, cannibalize
	- try delays rather than broken marker for tpus in case of temporary failures, throttling
- cyclic learning rate and/or fast-SWA (too much complexity too late)
- performance
	- TF profiling - just live with what we have, v3-8 alpha TPUs decent as-is, not worth investment until more stable tooling, not using C++ inference anyway
	- use hard-elimination to deallocate sub-trees while searching
	- validation log still 11-12s after training log on cluster, try prefetch harder or debug
- training improvements (too expensive with remaining time/resources)
	- pseudonegatives (look up the paper again, may be difficult/impossible for chess, invalid positions)
	- investigate FROST - need to read more, but applied to data efficiency, seems like we could go in a couple directions:
		- use as intended, grab a bunch of unlabeled games, gradually pseudo-label better (end up with more data)
		- treat existing labels as pseudo-labels (e.g. poor-confidence value-from-final-result) and refine (end up with improved label quality)
	- try knowledge distillation for regression ideas: http://www.cs.ox.ac.uk/files/11078/ICCV19_Distilling_Knowledge_From_a_Deep_Pose_Regressor_Network.pdf
- GUI (analysis workflow is good enough inverted)
	- invert uci/gui relationship after working out in-proc/out details
		- switch between database/UCI modes
		- browse EPDs
		- set up positions (paste pgn, fen, move pieces, uci from database position)
		- go X buttons
	- change the square background rather than adding overlay, need more consistency between black/white squares
	- deal with info panel height/scrolling, move list
	- websocket reconnect
- PUCT ideas
	- many too expensive, difficult, volatile, etc.