PUCT
- write parameter optimization harness
	- some kind of CLOP or bayesian optimization
	- configurable target, e.g. STS, Arasan21, subset of EPD, etc.
	- configurable metric; may want score, but may want nodes-required/or-N-if-failed, not sure yet
	- configurable budget, per-test (e.g. nodes), overall (number of tests)
- try hard exhaustive term (e.g. 1 per child after N visits)
- try catch up on unpropagated value when returning via AZPUCT
- try value stddev
- try elimination
- try softer backprop weights (e.g. help with 0.77 vs. 0.78 value example)
- try use virtual loss only for selection PUCT, not for AZPUCT/backprop-check (lose a lot of backprops, probably not viable)
- try integrate trained criticality back in
- CPU-optimize: e.g. can calculate global exploration factor much less often, much more required with new terms
- need long long search time parameter optimization for 1.25+ constant, e.g. applying similar to new terms

Mate term
- try eliminate mate term, force value() for proved mate/opponent mate
	- read over notes from initial work there, check for pitfalls
	- try to make mate-visiting stop wasting time, instantly push up to 2nd best
		- complicated with multiple levels of visits
		- complicated if 2nd best is also mate/terminal
		- only count as UCI "node" when expanding, not when terminal - same with initial expansions? - same with simulation count (800)?

PUCT - later
- try use saturation point of visits/ucb to extend 800 simulations or UCI time control if visits would exceed current best

PUCT questions
- force AZPUCT in search path after first non-AZPUCT choice?
- accept damaging 800-node distribution and prune aggressively to compensate?

PUCT - 800 convergence
- should we use 1.03 temperature at root (Wu)
- should we use artificially increased band width (~virtual loss) in self-play games

Criticality
- think about training target for stddev
	- since it's stddev as an error estimator, it could actually be non-consistent, just a way to speed up feedback cycle to better priors?
	- but probably still better if consistent

SE
- (do more work on self-play only runs before evaluating SE again)
- check 2f training run vs. 2d
- add SE to whichever is better (still with commentary)
- evaluate, check in L2 and/or SE

Search parallelism
- implement multi-threaded search
	- see old paper links around virtual loss, e.g. atomics in C++ example
- try speculative budgeting in addition to virtual exploration/loss
	- for N+small delta, which would have UCB > current best
	- can we still speculatively backprop, and is it needed after introducing scaled virtual loss
- try out a backtracking implementation of virtual exploration/loss that goes as deep
	  as it can into good lines and can choose between 2nd best here vs. 2nd best up one level, etc.,
	  choosing better nodes overall and avoiding failed simulations
- test vs. stockfish, need to avoid single-thread, 350 NPS situation

Student training
- make student prefer matching teacher for repeatability
- test raw student-as-teacher training to make sure distillation is worth it
- try low-hanging fruit on self-play network/data, e.g. higher learning rate

Training improvements
- SE (lc0)
	- try batchnorm/relu before SE since we have v2 residuals
- SE-ish-as-bias (Wu)
	- (TODO)
- playout cap randomization (Wu)
- pseudonegatives (look up the paper again, may be difficult/impossible for chess, invalid positions)
- try 1 vs. 8 vs. 32 value head filters again
	- lc0/Wu seem to use similar conv filters for policy and value heads?
	- lc0 was thinking fully connected layer may be needed for policy head when network isn't deep enough to cross board well (may not apply for distillation)
- try a run with masked policy loss (valid moves only) once there's enough data to compare
	- could also conceivably blend, like 1.0 for legal moves and 0.15 zero-pressure for others
- find some positions where engine misses shallow tactics, play with FPU and criticality
	- try to quantify and train criticality, feed into FPU (or deeper FPU, multi-move decay)
	- training target needs to be good/consistent even when already good at predicting; e.g. can't base on how wrong we were before searching, oscillate - intrinsic to position
- sketch out "value trust curve", especially with volatile game, multiple mistakes both sides
	- work out static eval vs. search on stockfish side for inflection/control points, see what's viable
- investigate FROST - need to read more, but applied to data efficiency, seems like we could go in a couple directions:
	- use as intended, grab a bunch of unlabeled games, gradually pseudo-label better (end up with more data)
	- treat existing labels as pseudo-labels (e.g. poor-confidence value-from-final-result) and refine (end up with improved label quality)

Training - later
- try out "sleeping" in the rotation - train random noise, different distributions
- Try knowledge distillation for regression ideas: http://www.cs.ox.ac.uk/files/11078/ICCV19_Distilling_Knowledge_From_a_Deep_Pose_Regressor_Network.pdf
- like Wu/lc0/SAI, think about finish-fast utility score added to win score - way later though, only useful if it plays well but dithers
- stochastic weight averaging
- move to ~100MB-sized chunks as recommended (but make sure self-play can still viably train)

GUI
- invert uci/gui relationship after working out in-proc/out details
	- switch between database/UCI modes
	- browse EPDs
	- set up positions (paste pgn, fen, move pieces, uci from database position)
	- go X buttons
	- drill into moves to see deeper breakdowns during UCI (like ~ ucb moves ...)
- deal with info panel height/scrolling, move list
- change the square background rather than adding overlay, need more consistency between black/white squares
- websocket reconnect

Bigger ideas
- what if we just shove the supervised games at the beginning of a larger "virtual" window, so that training starts with 100% supervised and finishes with 0%
	- window would need to start large, e.g. 1m or 2m, then shrink fast enough to reach milestones like 50% selfplay by X steps, 0% by Y steps
	  (without requiring many millions of self-play games)
- seems like networks may be getting too "set in their ways" with early unfortunate/shortcut data and heavy sample ratio
	- could use a generation-style system to periodically start new networks fresher with less supervised/early and lower sample ratio,
	  now that they have more data available to them, then take over on self-play once they emperically reach parity

Quality
- modify config.toml directly in sub-dockerfiles, don't rebuild/reinstall
- print config summary when starting a run

Commentary
- try tf.text, see if 2.4.0 is supported on Windows or 2.4.1 needed (sub-word tokenization)
- try BERT/GPT-2, check out huggingface
- better prediction code, top-k or w/e rather than greedy (not beam search, has issues)
- bring back network.js cleanup from stashed fit() port
- clean away transformer.js and any other danging .js (tensor2tensor?)
- try time and special-case speed-up prediction for batchsize=1
- basic - does the encoder need an extra dense+relu layer after the tower/reshape?
- think about 1D vs. 2D again: https://arxiv.org/pdf/1502.03044.pdf
- read about "Performer" architecture
- read about PET: https://arxiv.org/pdf/2001.07676.pdf
- find more training data
- build deterministic train/validate split (e.g. in Pgn tool that reads/dumps)
- try encode before-and-after positions (no flip?) - comment on the move, not the position
	- yes, image takes last N positions, but network is trained to evaluate the position, not the delta

Cluster
- validation log still 11-12s after training log on cluster, try prefetch harder or debug

UCI (#2)
- tune on GPU and TPU (methods below)
- try to increase in-thread parallelism without sacrificing STS strength
	- some kind of idea around only the first N backpropagating, the rest just setting up children/priors?
	- can always look into some of the failing positions and see what's going differently (harder without multiPV though)
- also test different FPU schemes for strength, but care, and def. don't change training
- try multi-thread
	- need to sync std::cout - use Reply() everywhere
- basic improvements to time control
	- don't waste time when only 1 or few legal moves
	- if dangerous time left, take mate-in-N rather than trying to find faster

CPU+GPU integration performance:
- try vectorize/GPU softmax/UCT calcs
- break down MCTS timing details just in case anything's off (instrumented, already did some sampling measurements/optimization)
- image key for prediction cache can be incrementally updated if it helps enough
- for Nodes can point last sibling at root and unrecurse deletion (sacrificing breadth-at-once)

Code quality
- either remove dataset/training mixing (C++/Python) or fix "ValidateSchedule" to handle division factor
- try multistage docker build, debian only for building chesscoach, copy over to tensorflow base
- inject config.toml into cluster volume, take out of image tags, make sure it takes priority over installed
- copy config.toml from install->user on run (if not present) - optimized for dev iteration atm
- switch to vcpkg for windows dependencies
- fix _ in network names - split on final _
- factor out all-exist ringbuffer with foreach iteration (begin/end)
- privatize C++ methods (got too python-brained)
- try split up MCTS vs. selfplaygames better - e.g. maybe move softmax/selectmove out? separate files?
- try split SelfPlayGame/Worker vs. "UciGame/Worker" better somehow (including image/value/policy arrays, batch sizes, etc.)
- improve config use in C++, feels messy
- add Python type info everywhere - look up best practices for linting etc.
- poison self-play workers and join threads properly
- check for any unnecessary move constructors
- add further architecture configuration to toml config (residuals*filters, etc.)
- switch to sample ratio, rather than specifying games + steps (complicated, ties in to "curriculum schedule" in config maybe)
- StrengthTestNetwork (naming)

UCI (#3)
- "random move with eval within 1%"
	- if best is value N, softmax sample with temperature 10 among (value >= N - 0.01), where 0.01 = (win-loss)/100
	- "best" I'm assuming is the otherwise usual selection, i.e. most visited
	- code for shorter mates, etc., should override this behavior (no diversity needed then)
- mate
	- if root node's terminal value is known, and allowed to stop searching, make a move instantly and save time
	- add global depth cut-off (a little tricky, need to allow MCTS to "back up" and ban paths that don't reach a leaf in time)
	- add killer heuristic (needs to vanish quickly with exploration)
		- test with M1 position with M1 prior artifically set low for ply 0
		- also strength-test
	- forced draw propagation if it'll help
- look into LCB move selection (Wu, LZ)
- implement worthwhile options (work out hash, TT vs. prediction cache)
- workaround for .exe vs. non in ChessBase, test as kibitzer
- implement proper time controls/search options, ponder

Deployment
- installers, instructions, progress indicators, error handling, etc.
- linux unit test script

Publishing
- write-ups
- website - game-in-10, one at a time, people can watch, comments shown for each move

Revisit
- try batch renorm + ghost batch norm
	- Bug: https://github.com/tensorflow/tensorflow/issues/32380
- any more cache tuning? - hits about 70% full 40% hit rate after 3142 games, 12 ply max
	- while not full hit rate should be higher? add some new metrics

Bugs
- Read-AV in game stateinfo cleanup when quitting UCI
- Some kind of race condition spamming next-chunk button in GUI, locks up Python/C++ interop
- Close cleanly if selfplay/UCI network not found by name in config list, in Python or C++
- SelfPlayWorker objects are created on the main thread and use its StateInfo in Game::Game(), then the worker thread steals in Free
- Still may be a leak between multiple self-play rotations separated by training - doesn't require strength testing to repro
	- Looks like it's actually the training code - need to investigate in Python
- Rare ephemeral storage issue on cluster, might be core dumps
- Tiny configs with self-play don't work now with minimum 2000 chunking
- Tests need to set CHESSCOACH_SILENT before initializing python somehow (mostly for NetworkTest.cpp)

Low priority
- shouldn't use prediction cache with uniform predictions (CPU) - ugly to plumb
- anything that uses the mainWorker will create new poolallocators on the primary (non-worker) thread, higher memory ceiling
	- unavoidable if we keep all games around to resume, need higher ceiling
- save fewer networks to cloud storage or cull old ones in between strength tests or something - 100 MB per save
- structured binding, check all pairs

Won't do
- TensorRT or TF C++ API (overly complicated setup, especiallly building TF on Windows, embarrassingly bad)
- Richer UCI features like multiPV or ponder
- endgame tablebases (e.g. leveraging Stockfish probing code)
	- UCI: not interesting enough, others can add if going for pure strength
	- Training: complicated, scope too large - self-play needs to make mistakes to learn imbalances