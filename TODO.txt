Porting
- Get play/train loop working - need to pass games back, orchestrate it all
- Delete Python self-play code when ready

C++
- Eventually modify stockfish - Position, etc. - so it doesn't reach out to uci/options/threads code at all
- Validate that SelfPlay.cpp draw checking is valid (re: ply) - step through basic + triangulation examples from starting position with knights
- Turn 12/8/8, 73/8/8 everywhere into constexpr

Basic loop
1) Roughly proportion self-play to training ratio
2) Get multiple self-play workers running and batching their predictions
3) Add additional input planes (beyond just pieces) once basic loop is working
4) Maybe make self-play/training workers use an --arg which also makes TF chatty (vs. UCI mode by default with no args)

Longer training
1) Save/load generated games
2) Save/load network

Correctness
- Make sure python-chess claimed repetition checking is working/stable - perhaps get rid of claim flags and manually check/cache is_rep or w/e after move already played (see code TODOs)

UCI
- Integrate sync-UCI hack with trained model
- Split out UCI thread so infinite think, ponder, etc. can workers
- Implement infinite think, ponder, time controls
- Implement endgame tablebases (invisible/external to the training loop?)
- Switch from python-chess to own board, movegen, etc. (or be sure of GPLv3 static vs. dynamic)