Training runs
- evaluate SE/pooling (read over 2f/2d notes)
	- actual SE, as-bias (Wu), hybrid
	- try batchnorm/relu before SE since we have v2 residuals

Tournaments
- implement mini-tournaments to better judge strength for training and parameter optimization
	- could run games every strength test interval, and bayeselo every 100k or so?
	- need to work out how to show data in tensorboard if older networks change elo during the run
		- multiple points, same X? multiple series, one per bayeselo?
- test with/without SBLE-PUCT, worried about sufficient backprop for losing positions (even deeper within trees, avoiding traps)

Training runs, post-800k, post-2.4m
- try without mcts value auxiliary again
- try weaning off teacher or hard-cutoff
- try switching to teacher-only prediction (SWA? stage predicates in config?)

Next fresh run
- (require SE, mini-tournaments)
- selfplay7, Fresh3

Profiling
- put profiler server behind config to avoid firewall prompts e.g. in UCI
- try out profiling
	- capture a trace locally - may be issues with networking/firewall

Criticality training (shelved)
- add to GUI, look over saved positions, decide whether to drive 800-1600 range
- either pull in whole change or some of the code cleanup
	- logging wrong loss to tensorboard in shelved commit, fix
	- add unit test for criticality training target via decompress API

Next fresh run
- (requires criticality)

Training improvements (low confidence)
- pseudonegatives (look up the paper again, may be difficult/impossible for chess, invalid positions)
- sketch out "value trust curve", especially with volatile game, multiple mistakes both sides
	- work out static eval vs. search on stockfish side for inflection/control points, see what's viable
- investigate FROST - need to read more, but applied to data efficiency, seems like we could go in a couple directions:
	- use as intended, grab a bunch of unlabeled games, gradually pseudo-label better (end up with more data)
	- treat existing labels as pseudo-labels (e.g. poor-confidence value-from-final-result) and refine (end up with improved label quality)
- try out "sleeping" in the rotation - train random noise, different distributions
- Try knowledge distillation for regression ideas: http://www.cs.ox.ac.uk/files/11078/ICCV19_Distilling_Knowledge_From_a_Deep_Pose_Regressor_Network.pdf

Commentary #3
- need fix for tensorflow_text on alpha TPU VMs - lazy-import for now
- remove dropout for now - can slowly add back decoder-only - may need to avoid it for highly discrete board squares in the encoder sequence
- investigate inference problems locally (initial code is stashed)
- build small manual test set for commentary inference
- may need to increase maximum sequence length, with sub-word tokenization
- maybe backprop into encoder (sometimes? always?)
- compare interleaving with main model training vs. "at the end"
- compare adam and sgd-momentum for commentary
	- try varying warmup steps
	- try flip to pre-LN, get rid of warmup everywhere: https://openreview.net/pdf?id=B1x8anVFPr
- review/tune commentary quality
- compare beam and top-k
	- look back through my notes, was pretty pessimistic about beam based on articles a few months back

Commentary #4
- try pre or post-processing with GPT-2
- try data augmentation using BERT: https://www.researchgate.net/publication/343958685_Text_Augmentation_Using_BERT_for_Image_Captioning
- maybe shrink model if still not enough data

Commentary #5
- for interleaving regular/commentary training - read up on "learning without forgetting"
- basic - does the encoder need an extra dense+relu layer after the tower/reshape?
	- basically 256->512 embedding rather than categorical->512 embedding
- try encode before-and-after positions (no flip?) - comment on the move, not the position
	- yes, image takes last N positions, but network is trained to evaluate the position, not the delta

Prediction cache
- investigate collisions (non-transposition style) during single search UCI affecting value convergence (details in 1/28 notes)
- test for average strength gain/loss ignoring path dependence and using in UCI/strengthtest for transpositions
	- no gain/loss earlier, try again after more PUCT work that does better for more nodes
- test speed gain for self-play generation ignoring path dependence, transposition table-style
- try stockfish-style prefetch asap after hash key update
- any more cache tuning? - hits about 70% full 40% hit rate after 3142 games, 12 ply max
	- while not full hit rate should be higher? add some new metrics
	- can probably remove max-ply if switching to transposition style - clear probe metrics after ramp-up, then measure

Strength/parameter evaluation
- switch to/add mini-tournaments, rather than just STS/Arasan?
- try fully-Bayesian again if using mini-tournaments?

PUCT - medium confidence
- try scale FPU up over time, gives exhaustive coverage, can use checks/winning captures heuristic and prior to differentiate
	- try hard exhaustive term (e.g. 1 per child after N visits)
- try value stddev
- try decouple linear term from value/prior deltas - not enough pure linear, not enough backprops in low-value-squish subtrees
	- causes scrambling at low value squish, even prior exploration term maybe
	- look at 2r2rk1/1b2qppp/pp3n2/n2p4/P2N4/RPN1P3/2Q1BPPP/5RK1 w - - 1 17 (need to find b4)
- try elimination
- try softer backprop weights (e.g. help with 0.77 vs. 0.78 value example - although threshold with hard weights may still work there)
- last all-out attempt at position #3 before returning to 800 training target and actual training again
	- try last-value again but scaled down (constant or f(n))
	- try killer heuristic for mate-in-N only - good examples in Arasan21 position #3 underneath Rf6, have to prove that many moves are losing

PUCT - low confidence
- try sufficiency threshold or minimum value delta
- try use virtual loss only for selection PUCT, not for AZPUCT/backprop-check (lose a lot of backprops, probably not viable)
- try integrate trained criticality back in

PUCT - expensive/failed ideas
- catch up on unpropagated value when returning via AZPUCT (+upSum, +upWeight)
- regret-pruning (+upSum, +upWeight)
- RAVE term, decaying with exploration (+amafSum, +amafWeight)

PUCT - finishing
- ablate PUCT terms, trim down to just parallelism/mate improvements, confidently measure what helps
- CPU-optimize: e.g. can calculate global exploration factor much less often, much more required with new terms
- see if there's enough speedup from cache-aligning nodes and just paying for the extra self-play memory
	- (assume not because we usually need to visit a bunch of children at once; depends on isolated parent access)
- need long long search time parameter optimization for 1.25+ constant, e.g. applying similar to new terms

PUCT - training
- see if anything helps 800 node range (i.e. optimize parameters with nodes=800), or 1600, etc.

PUCT - later
- try use saturation point of visits/ucb to extend 800 simulations or UCI time control if visits would exceed current best
	- could this also be used earlier during search, backpropagate up a pending/bounty value via separate field to be replaced
	  by actual backprops - set it up when saturation point would take from below 1st to 1st in visits

GUI
- invert uci/gui relationship after working out in-proc/out details
	- switch between database/UCI modes
	- browse EPDs
	- set up positions (paste pgn, fen, move pieces, uci from database position)
	- go X buttons
	- drill into moves to see deeper breakdowns during UCI (like ~ ucb moves ...)
- deal with info panel height/scrolling, move list
- change the square background rather than adding overlay, need more consistency between black/white squares
- websocket reconnect

Quality
- modify config.toml directly in sub-dockerfiles, don't rebuild/reinstall

UCI (#2)
- manually dig into/debug STS strength drop with higher parallelism (1*16 vs. 2*256)
	- maybe enforce a threshold from 1st parallel PUCT to Nth after virtual losses - if too much lower, don't backprop
- already forcing value() for proved mate/opponent mate, but investigate positions and see whether mate term still helps M3 vs. M2, etc.
	- read over notes from initial work there, check for pitfalls
	- try no exploration terms for opponent-mate (test position: 6k1/4pppp/3B4/8/8/8/5PPP/R5K1 b - - 0 0)
	- try to make mate-visiting stop wasting time, instantly push up until an ancestor down to 2nd best
		- complicated with multiple levels of visits
		- complicated if 2nd best is also mate/terminal
		- only count as UCI "node" when expanding, not when terminal - same with initial expansions? - same with simulation count (800)?
- (still needed?) try out a backtracking implementation of virtual exploration/loss that goes as deep
	  as it can into good lines and can choose between 2nd best here vs. 2nd best up one level, etc.,
	  choosing better nodes overall and avoiding failed simulations
- (does this make any sense?) try speculative budgeting in addition to virtual exploration/loss
	- for N+small delta, which would have UCB > current best
	- can we still speculatively backprop, and is it needed after introducing scaled virtual loss
- profile CPU again
- tail Backpropagate into BackpropagateVisitsOnly
- basic improvements to time control
	- badly need to play well with X moves in Y, "movestogo", loses games vs. stockfish
	- don't waste time when only 1 or few legal moves
	- if dangerous time left, take mate-in-N rather than trying to find faster

CPU+GPU integration performance:
- try vectorize/GPU softmax/UCT calcs
- break down MCTS timing details just in case anything's off (instrumented, already did some sampling measurements/optimization)
- image key for prediction cache can be incrementally updated if it helps enough

Code quality
- copy config.toml from install->user on run (if not present) - optimized for dev iteration atm
- switch to vcpkg for windows dependencies
- fix _ in network names - split on final _
- factor out all-exist ringbuffer with foreach iteration (begin/end)
- privatize C++ methods (got too python-brained)
- try split up MCTS vs. selfplaygames better - e.g. maybe move softmax/selectmove out? separate files?
- try split SelfPlayGame/Worker vs. "UciGame/Worker" better somehow (including image/value/policy arrays, batch sizes, etc.)
- add Python type info everywhere - look up best practices for linting etc.
- check for any unnecessary move constructors
- StrengthTestNetwork (naming)

UCI (#3)
- mate
	- if root node's terminal value is known, and allowed to stop searching, make a move instantly and save time
	- add global depth cut-off (a little tricky, need to allow MCTS to "back up" and ban paths that don't reach a leaf in time)
	- add killer heuristic (needs to vanish quickly with exploration)
		- test with M1 position with M1 prior artifically set low for ply 0
		- also strength-test
	- forced draw propagation if it'll help
- look into LCB move selection (Wu, LZ)
- implement worthwhile options (work out hash, TT vs. prediction cache)
- workaround for .exe vs. non in ChessBase, test as kibitzer
- implement proper time controls/search options, ponder

Deployment
- re-test everything on local/GPU and add comments for appropriate config for both (or implement HW-dependent config)
- installers, instructions, progress indicators, error handling, etc.
- linux unit test script
- add windows command line build script, binplace somewhere cleanly

Publishing
- write-ups
- website - game-in-10, one at a time, people can watch, comments shown for each move

Bugs
- "quit" without "stop" hangs UCI
- Some kind of race condition spamming next-chunk button in GUI, locks up Python/C++ interop
- Close cleanly if selfplay/UCI network not found by name in config list, in Python or C++
- SelfPlayWorker objects are created on the main thread and use its StateInfo in Game::Game(), then the worker thread steals in Free
- Rare ephemeral storage issue on cluster, might be core dumps

Low priority
- shouldn't use prediction cache with uniform predictions (CPU) - ugly to plumb

Won't do
- TensorRT or TF C++ API (overly complicated setup, especiallly building TF on Windows, embarrassingly bad)
- Mixed precision (depends on specific hardware, complicates code)
- Richer UCI features like multiPV or ponder
- endgame tablebases (e.g. leveraging Stockfish probing code)
	- UCI: not interesting enough, others can add if going for pure strength
	- Training: complicated, scope too large - self-play needs to make mistakes to learn imbalances
- contempt (self-play or UCI)
- ~100MB-sized chunks
	- complicated by supervised vs. self-play size, and time between networks for small self-play clusters
	- BigTable is an alternative if training needs to scale up to pods
- playout cap randomization (Wu)
	- great concept but greatly complicates training data compression, code, prefer simplicity in this trade-off
- finish-fast utility score added to win score a la SAI/Wu/lc0
	- useful to help with dithering, especially late-game, but not meeting the bar
- alpha manager improvements
	- allow for some roles to be broken/unassigned rather than bailing out
	- prioritize trainer over players, cannibalize
	- try delays rather than broken marker for tpus in case of temporary failures, throttling
- cyclic learning rate and/or fast-SWA (too much complexity too late)
- performance
	- validation log still 11-12s after training log on cluster, try prefetch harder or debug