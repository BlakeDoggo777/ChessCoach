// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChessCoach.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ChessCoach_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ChessCoach_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ChessCoach_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ChessCoach_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ChessCoach_2eproto;
namespace message {
class Chunk;
class ChunkDefaultTypeInternal;
extern ChunkDefaultTypeInternal _Chunk_default_instance_;
class Game;
class GameDefaultTypeInternal;
extern GameDefaultTypeInternal _Game_default_instance_;
class Position;
class PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
}  // namespace message
PROTOBUF_NAMESPACE_OPEN
template<> ::message::Chunk* Arena::CreateMaybeMessage<::message::Chunk>(Arena*);
template<> ::message::Game* Arena::CreateMaybeMessage<::message::Game>(Arena*);
template<> ::message::Position* Arena::CreateMaybeMessage<::message::Position>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace message {

// ===================================================================

class Position PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.Position) */ {
 public:
  inline Position() : Position(nullptr) {}
  virtual ~Position();

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const final {
    return CreateMaybeMessage<Position>(nullptr);
  }

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.Position";
  }
  protected:
  explicit Position(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChessCoach_2eproto);
    return ::descriptor_table_ChessCoach_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 3,
    kPolicyFieldNumber = 4,
    kMoveFieldNumber = 1,
    kMctsValueFieldNumber = 2,
  };
  // repeated fixed64 image = 3 [packed = true];
  int image_size() const;
  private:
  int _internal_image_size() const;
  public:
  void clear_image();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_image(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_image() const;
  void _internal_add_image(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_image();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 image(int index) const;
  void set_image(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_image(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      image() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_image();

  // repeated float policy = 4 [packed = true];
  int policy_size() const;
  private:
  int _internal_policy_size() const;
  public:
  void clear_policy();
  private:
  float _internal_policy(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_policy() const;
  void _internal_add_policy(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_policy();
  public:
  float policy(int index) const;
  void set_policy(int index, float value);
  void add_policy(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      policy() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_policy();

  // uint32 move = 1;
  void clear_move();
  ::PROTOBUF_NAMESPACE_ID::uint32 move() const;
  void set_move(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_move() const;
  void _internal_set_move(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float mctsValue = 2;
  void clear_mctsvalue();
  float mctsvalue() const;
  void set_mctsvalue(float value);
  private:
  float _internal_mctsvalue() const;
  void _internal_set_mctsvalue(float value);
  public:

  // @@protoc_insertion_point(class_scope:message.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > image_;
  mutable std::atomic<int> _image_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > policy_;
  mutable std::atomic<int> _policy_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 move_;
  float mctsvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChessCoach_2eproto;
};
// -------------------------------------------------------------------

class Game PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.Game) */ {
 public:
  inline Game() : Game(nullptr) {}
  virtual ~Game();

  Game(const Game& from);
  Game(Game&& from) noexcept
    : Game() {
    *this = ::std::move(from);
  }

  inline Game& operator=(const Game& from) {
    CopyFrom(from);
    return *this;
  }
  inline Game& operator=(Game&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Game& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Game* internal_default_instance() {
    return reinterpret_cast<const Game*>(
               &_Game_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Game& a, Game& b) {
    a.Swap(&b);
  }
  inline void Swap(Game* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Game* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Game* New() const final {
    return CreateMaybeMessage<Game>(nullptr);
  }

  Game* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Game>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Game& from);
  void MergeFrom(const Game& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Game* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.Game";
  }
  protected:
  explicit Game(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChessCoach_2eproto);
    return ::descriptor_table_ChessCoach_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionsFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated .message.Position positions = 2;
  int positions_size() const;
  private:
  int _internal_positions_size() const;
  public:
  void clear_positions();
  ::message::Position* mutable_positions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::Position >*
      mutable_positions();
  private:
  const ::message::Position& _internal_positions(int index) const;
  ::message::Position* _internal_add_positions();
  public:
  const ::message::Position& positions(int index) const;
  ::message::Position* add_positions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::Position >&
      positions() const;

  // float result = 1;
  void clear_result();
  float result() const;
  void set_result(float value);
  private:
  float _internal_result() const;
  void _internal_set_result(float value);
  public:

  // @@protoc_insertion_point(class_scope:message.Game)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::Position > positions_;
  float result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChessCoach_2eproto;
};
// -------------------------------------------------------------------

class Chunk PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.Chunk) */ {
 public:
  inline Chunk() : Chunk(nullptr) {}
  virtual ~Chunk();

  Chunk(const Chunk& from);
  Chunk(Chunk&& from) noexcept
    : Chunk() {
    *this = ::std::move(from);
  }

  inline Chunk& operator=(const Chunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chunk& operator=(Chunk&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Chunk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Chunk* internal_default_instance() {
    return reinterpret_cast<const Chunk*>(
               &_Chunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Chunk& a, Chunk& b) {
    a.Swap(&b);
  }
  inline void Swap(Chunk* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chunk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chunk* New() const final {
    return CreateMaybeMessage<Chunk>(nullptr);
  }

  Chunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chunk>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chunk& from);
  void MergeFrom(const Chunk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chunk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.Chunk";
  }
  protected:
  explicit Chunk(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChessCoach_2eproto);
    return ::descriptor_table_ChessCoach_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGamesFieldNumber = 1,
  };
  // repeated .message.Game games = 1;
  int games_size() const;
  private:
  int _internal_games_size() const;
  public:
  void clear_games();
  ::message::Game* mutable_games(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::Game >*
      mutable_games();
  private:
  const ::message::Game& _internal_games(int index) const;
  ::message::Game* _internal_add_games();
  public:
  const ::message::Game& games(int index) const;
  ::message::Game* add_games();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::Game >&
      games() const;

  // @@protoc_insertion_point(class_scope:message.Chunk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::Game > games_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChessCoach_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Position

// uint32 move = 1;
inline void Position::clear_move() {
  move_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Position::_internal_move() const {
  return move_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Position::move() const {
  // @@protoc_insertion_point(field_get:message.Position.move)
  return _internal_move();
}
inline void Position::_internal_set_move(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  move_ = value;
}
inline void Position::set_move(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_move(value);
  // @@protoc_insertion_point(field_set:message.Position.move)
}

// float mctsValue = 2;
inline void Position::clear_mctsvalue() {
  mctsvalue_ = 0;
}
inline float Position::_internal_mctsvalue() const {
  return mctsvalue_;
}
inline float Position::mctsvalue() const {
  // @@protoc_insertion_point(field_get:message.Position.mctsValue)
  return _internal_mctsvalue();
}
inline void Position::_internal_set_mctsvalue(float value) {
  
  mctsvalue_ = value;
}
inline void Position::set_mctsvalue(float value) {
  _internal_set_mctsvalue(value);
  // @@protoc_insertion_point(field_set:message.Position.mctsValue)
}

// repeated fixed64 image = 3 [packed = true];
inline int Position::_internal_image_size() const {
  return image_.size();
}
inline int Position::image_size() const {
  return _internal_image_size();
}
inline void Position::clear_image() {
  image_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Position::_internal_image(int index) const {
  return image_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Position::image(int index) const {
  // @@protoc_insertion_point(field_get:message.Position.image)
  return _internal_image(index);
}
inline void Position::set_image(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  image_.Set(index, value);
  // @@protoc_insertion_point(field_set:message.Position.image)
}
inline void Position::_internal_add_image(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  image_.Add(value);
}
inline void Position::add_image(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_image(value);
  // @@protoc_insertion_point(field_add:message.Position.image)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Position::_internal_image() const {
  return image_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Position::image() const {
  // @@protoc_insertion_point(field_list:message.Position.image)
  return _internal_image();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Position::_internal_mutable_image() {
  return &image_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Position::mutable_image() {
  // @@protoc_insertion_point(field_mutable_list:message.Position.image)
  return _internal_mutable_image();
}

// repeated float policy = 4 [packed = true];
inline int Position::_internal_policy_size() const {
  return policy_.size();
}
inline int Position::policy_size() const {
  return _internal_policy_size();
}
inline void Position::clear_policy() {
  policy_.Clear();
}
inline float Position::_internal_policy(int index) const {
  return policy_.Get(index);
}
inline float Position::policy(int index) const {
  // @@protoc_insertion_point(field_get:message.Position.policy)
  return _internal_policy(index);
}
inline void Position::set_policy(int index, float value) {
  policy_.Set(index, value);
  // @@protoc_insertion_point(field_set:message.Position.policy)
}
inline void Position::_internal_add_policy(float value) {
  policy_.Add(value);
}
inline void Position::add_policy(float value) {
  _internal_add_policy(value);
  // @@protoc_insertion_point(field_add:message.Position.policy)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Position::_internal_policy() const {
  return policy_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Position::policy() const {
  // @@protoc_insertion_point(field_list:message.Position.policy)
  return _internal_policy();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Position::_internal_mutable_policy() {
  return &policy_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Position::mutable_policy() {
  // @@protoc_insertion_point(field_mutable_list:message.Position.policy)
  return _internal_mutable_policy();
}

// -------------------------------------------------------------------

// Game

// float result = 1;
inline void Game::clear_result() {
  result_ = 0;
}
inline float Game::_internal_result() const {
  return result_;
}
inline float Game::result() const {
  // @@protoc_insertion_point(field_get:message.Game.result)
  return _internal_result();
}
inline void Game::_internal_set_result(float value) {
  
  result_ = value;
}
inline void Game::set_result(float value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:message.Game.result)
}

// repeated .message.Position positions = 2;
inline int Game::_internal_positions_size() const {
  return positions_.size();
}
inline int Game::positions_size() const {
  return _internal_positions_size();
}
inline void Game::clear_positions() {
  positions_.Clear();
}
inline ::message::Position* Game::mutable_positions(int index) {
  // @@protoc_insertion_point(field_mutable:message.Game.positions)
  return positions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::Position >*
Game::mutable_positions() {
  // @@protoc_insertion_point(field_mutable_list:message.Game.positions)
  return &positions_;
}
inline const ::message::Position& Game::_internal_positions(int index) const {
  return positions_.Get(index);
}
inline const ::message::Position& Game::positions(int index) const {
  // @@protoc_insertion_point(field_get:message.Game.positions)
  return _internal_positions(index);
}
inline ::message::Position* Game::_internal_add_positions() {
  return positions_.Add();
}
inline ::message::Position* Game::add_positions() {
  // @@protoc_insertion_point(field_add:message.Game.positions)
  return _internal_add_positions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::Position >&
Game::positions() const {
  // @@protoc_insertion_point(field_list:message.Game.positions)
  return positions_;
}

// -------------------------------------------------------------------

// Chunk

// repeated .message.Game games = 1;
inline int Chunk::_internal_games_size() const {
  return games_.size();
}
inline int Chunk::games_size() const {
  return _internal_games_size();
}
inline void Chunk::clear_games() {
  games_.Clear();
}
inline ::message::Game* Chunk::mutable_games(int index) {
  // @@protoc_insertion_point(field_mutable:message.Chunk.games)
  return games_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::Game >*
Chunk::mutable_games() {
  // @@protoc_insertion_point(field_mutable_list:message.Chunk.games)
  return &games_;
}
inline const ::message::Game& Chunk::_internal_games(int index) const {
  return games_.Get(index);
}
inline const ::message::Game& Chunk::games(int index) const {
  // @@protoc_insertion_point(field_get:message.Chunk.games)
  return _internal_games(index);
}
inline ::message::Game* Chunk::_internal_add_games() {
  return games_.Add();
}
inline ::message::Game* Chunk::add_games() {
  // @@protoc_insertion_point(field_add:message.Chunk.games)
  return _internal_add_games();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::Game >&
Chunk::games() const {
  // @@protoc_insertion_point(field_list:message.Chunk.games)
  return games_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ChessCoach_2eproto
