###############################################################################
#                           Network configuration                             #
###############################################################################

[network]

training_network_name = "selfplay3"
uci_network_name = "selfplay3"
role = "train|play"

[[networks]]

    name = "chesscoach3"
    
    [networks.training]

    stages = [
        # Self-play
        { stage = "play", window_size_start = 12_000, window_size_finish = 200_000, num_games = 1_440_000 },

        # Train commentary, supervised and self-play, teacher
        { stage = "train_commentary", target = "teacher", type = "supervised" },
        { stage = "train", target = "teacher", type = "supervised", window_size_start = 2_000_000, window_size_finish = 2_000_000, num_games = 2_000_000 },
        { stage = "train", target = "teacher", type = "training", window_size_start = 12_000, window_size_finish = 200_000, num_games = 1_440_000 },
        { stage = "save", target = "teacher" },

        # Distill supervised and self-play to student
        { stage = "train", target = "student", type = "supervised", window_size_start = 2_000_000, window_size_finish = 2_000_000, num_games = 2_000_000 },
        { stage = "train", target = "student", type = "training", window_size_start = 12_000, window_size_finish = 200_000, num_games = 1_440_000 },
        { stage = "save", target = "student" },

        # Strength test (STS rating, etc.)
        { stage = "strength_test", target = "teacher" },
        { stage = "strength_test", target = "student" },
    ]

[[networks]]

    name = "supervised1"
    
    [networks.training]

    value_loss_weight = 0.1
    mcts_value_loss_weight = 0.015

    stages = [
        # Train supervised, teacher
        { stage = "train", target = "teacher", type = "supervised", window_size_start = 2_000_000, window_size_finish = 2_000_000, num_games = 2_000_000 },
        { stage = "save", target = "teacher" },

        # Strength test (STS rating, etc.)
        { stage = "strength_test", target = "teacher" },
    ]

[[networks]]

    name = "selfplay3"

    [networks.training]

    stages = [
        # Self-play
        { stage = "play", window_size_start = 24_000, window_size_finish = 400_000, num_games = 2_880_000 },

        # Train self-play, teacher then distill
        { stage = "train", target = "teacher", type = "training", window_size_start = 24_000, window_size_finish = 400_000, num_games = 2_880_000 },
        { stage = "save", target = "teacher" },
        { stage = "train", target = "student", type = "training", window_size_start = 24_000, window_size_finish = 400_000, num_games = 2_880_000 },
        { stage = "save", target = "student" },

        # Strength test (STS rating, etc.)
        { stage = "strength_test", target = "teacher" },
        { stage = "strength_test", target = "student" },
    ]

    games_path_training = "Games/Striped"

[[networks]]

    name = "commentary1"
    
    [networks.training]

    stages = [
        # Train commentary, teacher
        { stage = "train_commentary", target = "teacher", type = "supervised" },
        { stage = "save", target = "teacher" },
    ]

    [networks.training.commentary_learning_rate_schedule]

    steps = [0, 60_000, 120_000, 180_000]
    rates = [2e-2, 2e-3, 2e-4, 2e-5]

[[networks]]

    name = "chesscoach-tiny1"

    [networks.training]

    steps = 100
    warmup_steps = 10

    validation_interval = 50
    checkpoint_interval = 50
    strength_test_interval = 100

    stages = [
        # Self-play
        { stage = "play", window_size_start = 50, window_size_finish = 100, num_games = 100 },

        # Train commentary, supervised and self-play, teacher
        { stage = "train_commentary", target = "teacher", type = "supervised" },
        { stage = "train", target = "teacher", type = "supervised", window_size_start = 100, window_size_finish = 100, num_games = 100 },
        { stage = "train", target = "teacher", type = "training", window_size_start = 50, window_size_finish = 100, num_games = 100 },
        { stage = "save", target = "teacher" },

        # Distill supervised and self-play to student
        { stage = "train", target = "student", type = "supervised", window_size_start = 100, window_size_finish = 100, num_games = 100 },
        { stage = "train", target = "student", type = "training", window_size_start = 50, window_size_finish = 100, num_games = 100 },
        { stage = "save", target = "student" },

        # Strength test (STS rating, etc.)
        { stage = "strength_test", target = "teacher" },
        { stage = "strength_test", target = "student" },
    ]

    [networks.self_play]

    num_workers = 2
    prediction_batch_size = 50

[[networks]]

    name = "supervised-tiny1"
    
    [networks.training]

    value_loss_weight = 0.1
    mcts_value_loss_weight = 0.015

    steps = 100
    warmup_steps = 10

    validation_interval = 50
    checkpoint_interval = 50
    strength_test_interval = 100

    stages = [
        # Train supervised, teacher
        { stage = "train", target = "teacher", type = "supervised", window_size_start = 100, window_size_finish = 100, num_games = 100 },
        { stage = "save", target = "teacher" },

        # Strength test (STS rating, etc.)
        { stage = "strength_test", target = "teacher" },
    ]

[[networks]]

    name = "selfplay-tiny1"

    [networks.training]

    steps = 100
    warmup_steps = 10

    validation_interval = 50
    checkpoint_interval = 50
    strength_test_interval = 100

    stages = [
        # Self-play
        { stage = "play", window_size_start = 50, window_size_finish = 100, num_games = 100 },

        # Train self-play, teacher then distill
        { stage = "train", target = "teacher", type = "training", window_size_start = 50, window_size_finish = 100, num_games = 100 },
        { stage = "save", target = "teacher" },
        { stage = "train", target = "student", type = "training", window_size_start = 50, window_size_finish = 100, num_games = 100 },
        { stage = "save", target = "student" },

        # Strength test (STS rating, etc.)
        { stage = "strength_test", target = "teacher" },
        { stage = "strength_test", target = "student" },
    ]

    [networks.self_play]

    num_workers = 2
    prediction_batch_size = 50

[[networks]]

    name = "commentary-tiny1"
    
    [networks.training]

    steps = 100
    warmup_steps = 10

    validation_interval = 50
    checkpoint_interval = 50
    strength_test_interval = 100

    stages = [
        # Train commentary, teacher
        { stage = "train_commentary", target = "teacher", type = "supervised" },
        { stage = "save", target = "teacher" },
    ]

    [networks.training.commentary_learning_rate_schedule]

    steps = [0, 60_000, 120_000, 180_000]
    rates = [2e-2, 2e-3, 2e-4, 2e-5]

[[networks]]

    name = "benchmark1"

    [networks.training]

    stages = [
        # Self-play
        { stage = "play", window_size_start = 1_440_000, window_size_finish = 1_440_000, num_games = 1_440_000 },
    ]

    games_path_training = "Games/Benchmark"

    # NOTE: Still need to (a) turn off prediction cache if network untrained, (b) turn off uniform predictions if steps <= 0

###############################################################################
#     Default training and self-play configuration. Networks can override.    #
###############################################################################

[training]

architecture = "conv2d"
batch_size = 512
commentary_batch_size = 256
steps = 480_000
warmup_steps = 1000
pgn_interval = 1000
validation_interval = 800
checkpoint_interval = 4000
strength_test_interval = 20000
steps_per_execution = 100
value_loss_weight = 1.0
mcts_value_loss_weight = 0.15
policy_loss_weight = 1.0
momentum = 0.9
vocabulary_filename = "vocabulary.txt"
games_path_supervised = "Games/Supervised"
games_path_training = "Games/Training"
games_path_validation = "Games/Validation"
commentary_path_supervised = "Commentary/Supervised"
commentary_path_training = ""
commentary_path_validation = ""
wait_milliseconds = 300_000 # Check on Google Storage every 5 minutes when waiting for other machines.
stages = []

[training.learning_rate_schedule]

steps = [0] #[0, 60_000, 120_000, 180_000]
rates = [2.5e-2] #[2.5e-2, 2.5e-3, 2.5e-4, 2.5e-5]

[training.commentary_learning_rate_schedule]

steps = [0] #[0, 60_000, 120_000, 180_000]
rates = [2e-4] #[2e-4, 2e-5, 2e-6, 2e-7]

[self_play]

num_workers = 8
prediction_batch_size = 512

num_sampling_moves = 30
max_moves = 512
num_simulations = 800

root_dirichlet_alpha = 0.3
root_exploration_fraction = 0.25

exploration_rate_base = 19652.0
exploration_rate_init = 1.25

sublinear_exploration_rate = 200.0
linear_exploration_rate = 10_000.0

network_update_check_interval_seconds = 300.0
wait_for_updated_network = false

###############################################################################
#                       Miscellaneous configuration                           #
###############################################################################

[prediction_cache]

request_gibibytes = 8
min_gibibytes = 1
max_ply = 24

[time_control]

safety_buffer_milliseconds = 500
fraction_remaining = 20

[search]

mcts_parallelism = 64
gui_update_interval_nodes = 1000

[storage]

games_per_chunk = 2000

[paths]

# With the below config, a network may be saved to "gs://chesscoach/ChessCoach/Networks/network_000001000".
gcloud_bucket = "chesscoach"
gcloud_prefix = "ChessCoach"

networks = "Networks"
tensorboard = "TensorBoard"
logs = "Logs"
pgns = "Pgns"
optimization = "Optimization"

strength_test_marker_prefix = "StrengthTestComplete"

[optimization]

epd = "Arasan21.epd"
nodes = 100_000
failure_nodes = 10_000_000
position_limit = 0
log_interval = 10
plot_interval = 10

[optimization.parameters]

sublinear_exploration_rate = "Real(1e-2, 1e6, prior=log-uniform)"
linear_exploration_rate = "Real(1e-2, 1e6, prior=log-uniform)"

###############################################################################